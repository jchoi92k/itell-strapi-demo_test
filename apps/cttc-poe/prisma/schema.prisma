// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

generator json {
  provider  = "prisma-json-types-generator"
  namespace = "PrismaJson"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Session {
  id        String   @id @default(cuid())
  userId    String   @map("user_id")
  expiresAt DateTime @map("expires_at")
  createdAt DateTime @default(now()) @map("created_at")
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model User {
  id         String   @id @default(cuid())
  name       String?
  image      String?
  email      String?
  role       String   @default("user")
  prolificId String?  @map("prolific_pid")
  classId    String?  @map("class_id")
  finished   Boolean  @default(false)
  pageSlug   String?  @map("page_slug")
  timeZone   String?  @map("time_zone")
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  sessions                    Session[]
  summaries                   Summary[]
  notes                       Note[]
  ConstructedResponse         ConstructedResponse[]
  ConstructedResponseFeedback ConstructedResponseFeedback[]
  Event                       Event[]
  FocusTime                   FocusTime[]

  @@map("users")
}

model FocusTime {
  userId     String   @map("user_id")
  pageSlug   String   @map("page_slug")
  /// [FocusTimeData]
  data       Json
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  user       User     @relation(fields: [userId], references: [id])

  @@id([userId, pageSlug])
  @@map("focus_times")
}

model Event {
  id         String   @id @default(uuid())
  eventType  String   @map("event_type")
  userId     String   @map("user_id")
  pageSlug   String   @map("page_slug")
  /// [EventData]
  data       Json?    @db.JsonB
  created_at DateTime @default(now())

  user User @relation(fields: [userId], references: [id])

  @@map("events")
}

model Teacher {
  id         String  @id
  isApproved Boolean @default(false)
  isPrimary  Boolean @default(false)
  classId    String  @map("class_id")

  @@map("teachers")
}

model Summary {
  id   String @id @default(uuid())
  user User   @relation(fields: [userId], references: [id])

  userId           String   @map("user_id")
  classId          String?  @map("class_id")
  pageSlug         String   @map("page_slug")
  isPassed         Boolean
  containmentScore Float    @map("containment_score")
  similarityScore  Float    @map("similarity_score")
  wordingScore     Float?   @map("wording_score")
  contentScore     Float?   @map("content_score")
  text             String
  created_at       DateTime @default(now())
  updated_at       DateTime @updatedAt

  @@map("summaries")
}

model Note {
  id              String   @id @default(uuid())
  y               Float
  noteText        String?  @map("note_text")
  highlightedText String   @map("highlighted_text")
  pageSlug        String   @map("page_slug")
  color           String   @default("#3730a3")
  created_at      DateTime @default(now())
  updated_at      DateTime @updatedAt
  range           String

  userId String @map("user_id")
  user   User   @relation(fields: [userId], references: [id])

  @@map("notes")
}

model ConstructedResponse {
  id String @id @default(uuid())

  userId     String   @map("user_id")
  pageSlug   String   @map("page_slug")
  chunkSlug  String   @map("chunk_slug")
  score      Int
  response   String
  created_at DateTime @default(now())

  user User @relation(fields: [userId], references: [id])

  @@index([userId])
  @@map("constructed_responses")
}

model ConstructedResponseFeedback {
  id String @id @default(uuid())

  userId     String   @map("user_id")
  pageSlug   String   @map("page_slug")
  chunkSlug  String   @map("chunk_slug")
  isPositive Boolean  @map("is_positive")
  feedback   String
  tags       String[]
  created_at DateTime @default(now())

  user User @relation(fields: [userId], references: [id])

  @@map("constructed_responses_feedback")
}

model ChatMessage {
  userId     String   @map("user_id")
  pageSlug   String   @map("page_slug")
  /// [ChatMessageData]
  data       Json[]   @db.JsonB
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  @@id([userId, pageSlug])
  @@map("chat_messages")
}
